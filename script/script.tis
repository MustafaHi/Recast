// Recast
// https://github.com/MustafaHi/Recast
// Refer to Header.tis for main script

event click $(navigator>li) {
    $(browser).@#show = this.@#for;
    if (this.state.current) {return true;}
    
    if (var c = $(navigator>li:current)) { c.state.current = false; }
    if (var e = $(browser>section:expanded)) { e.state.expanded = false; }
    this.state.current = true;
    $(browser>#{this.@#for}).state.expanded = true;
}
event keyup $(#iSearch)(e) {
    if (e.keyCode == Event.VK_ENTER) {
        if (this.value.length == 0) {DB.discover(); return true;}
        Podcasts = [];
        getPodcasts(this.value, false, 50);
    }
}

event click $(playlist>header) { $(browser).@#show = "shows"; }

var prevLink;
event click $(podcast) {
    var link = this.@#feed;
    if (prevLink == link) {
        $(browser).@#show = "playlist";
        return true;
    }
    prevLink = link;
    getPodcast(link);
    Playlist.state.busy = true;
    Playlist.@#failed   = undefined;
    Playlist.@#feed     = link;
    $(browser).@#show   = "playlist";
}

event click $(.bSubscribe) {
    if (this.state.current) { // unsubscribe
        DB.unsubscribe(Playlist.@#feed);
        this.state.current = false;
    } else { // subscribe
        var p = Podcasts.find(p => p.feedUrl == Playlist.@#feed);
        var podcast = {
            feed: p.feedUrl,
            name: p.collectionName,
            author: p.artistName,
            update: new Date().toISOString(),
            image100: p.artworkUrl100,
            image600: p.artworkUrl600
        };
        DB.subscribe(podcast);
        this.state.current = true;
    }
    DB.subscriptions();
}

event click $(.bPlay) {
    var p = this.$o(episode) || this.$o(item);
    if (p.tag == "episode") {
        Queue.@#list = "";
        Queue.$content(<item audio="{p.@#audio}" time="0"><n>{p.$(name).text}</n><a>{$(author>name).text}</a></item>);
        $(queue>item).state.current = true;
    } else if (p.tag == "item") {
        if (this.@#download) return true;
        if ($(browser).@#show == "downloads") {
            Queue.@#list = "";
            Queue.$content(<item audio="{p.@#audio}" time="0"><n>{p.$(n).text}</n><a>{$(a).text}</a></item>);
            $(queue>item).state.current = true;
        } else {
            var list;
            if ($(browser).@#show == "subscriptions")
                list = DB.data.p.filter(p => p.list == "subscriptions");
            else
                list = DB.data.p.filter(p => p.list == $(#lists>li:current).id);
            DB.podcasts(list, "queue");
            $(queue>item[audio="{p.@#audio}"]).postEvent("click");
        }
    }
    play();
}

event click $(.bPlaylist) { this.$p(button).popup($(#mPlaylists), 5); }
event click $(.bLink) { view.clipboard(#put, {text: this.$p(episode).@#audio}); }

event click $(episode>description) { this.state.expanded = true; }
event click $(a[href]) { Sciter.launch(this.@#href); return true; }


self.on("keydown", (e) => {
    if (e.keyCode == Event.VK_ESCAPE) { $(browser).@#show = "undefined"; }
});

event click $(cell .more) {
    iSearch.value = this.$o(block).$(b).html;
    iSearch.sendKeyEvent({type: Event.KEY_UP, keyCode: Event.VK_ENTER});
}

event dblClick $([for=home]) {
    if (iSearch.value.length == 0) return true; 
    iSearch.value = "";
    iSearch.sendKeyEvent({type: Event.KEY_UP, keyCode: Event.VK_ENTER});
}

function self.closing(reason) {
    if (reason == #by-code) {
        var (sx, sy, sw, sh) = view.box(#rectw, #border, #screen);
        DB.data.o.size = [sw,sh];
        DB.data.o.position = [sx,sy];
        DB.save();
    }
}

event click $(button#close) {
    DB.data.o.trayPlayer ? view.state = View.WINDOW_HIDDEN : view.close();
}