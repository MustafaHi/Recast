
event click $(#tapePlay) {
    if (!$(queue>item:current)) return;
    if (!this.@#started)
    {
        this.@#started = true;
        if (Tape.videoPosition() > 1) {
            Tape.videoPlay();
            Tape.timer(0.5s, pulse);
            Tape.timer(10s, saveTime);
        } else { play(); }
    }
    else
    {
        this.@#started = undefined;
        Tape.videoStop();
        saveTime();
    }
}
event click $(#bPrev) {
    if (!$(queue>item:current)) return;
    if (Tape.videoPosition() > 10) Tape.videoPlay(0);
    else if (var item = Queue.$$(item)[Queue.$(item:current).index+1]) item.sendEvent("click");
}
event click $(#bNext) {
    if (!$(queue>item:current)) return;
    if (var item = Queue.$$(item)[Queue.$(item:current).index-1]) item.sendEvent("click");
}

event change $(#tracker) {
    if (!$(queue>item:current)) return;
    var (tm, ts) = hms(this.value);
    this.@#time = String.printf("%02d:%02d", tm, ts);
}
event click $(#tracker) {
    if ($(#tapePlay).@#started) {
        Tape.videoPlay(this.value);
    } else {
        $(#tapePlay).sendEvent("click");
    }
}


event click $(queue>item) {
    if (this.state.current) return true;
    $(queue>item:current).state.current = false;
    this.state.current = true;
    play();
}

Tape.onControlEvent = function(evt) { // not working [require a frame to be rendered]
    switch(evt.type) {
      case Event.VIDEO_INITIALIZED: () => {debug: "init";    return false};
      case Event.VIDEO_STARTED:     () => {debug: "started"; return false};
      case Event.VIDEO_STOPPED:     () => {debug: "stopped"; return false};
    }
}

var TrackerBTN = Tracker.$(button);
function DrawProgress() {
    var button = TrackerBTN;
    this.paintContent = function(gfx)
    {
      var (x1,y1,x2,y2) = button.box(#rect,#border,#parent);
      var (w,h) = this.box(#dimension,#inner);
      gfx.fillColor( button.style["border-left-color"] )
         .rectangle(0,0,(x1+x2)/2,h);
    }
}

function play() {
    if (var p = $(queue>item:current)) {
        $(#tapePlay).@#started = true;
        Tape.videoUnload();
        Tape.videoLoad(p.@#audio);
        Tape.videoPlay(p.@#time.toInteger());
        Tape.timer(0.5s, pulse);
        Tape.timer(10s, saveTime);
        DB.data.o.current = {
            name: p.$(n).text,
            author: p.$(a).text,
            audio: p.@#audio,
            list: Queue.@#list,
            time: p.@#time
        }
        DB.save();
    }
    // } else if ($(#tapePlay).@#started) { $(#tapePlay).postEvent("click"); }
}

function saveTime() {
    var time = Tape.videoPosition();
    if (!$(queue).@#list) DB.data.o.current.time = time; 
    else {
        var (i,p ) = DB.data.p.find(p => p.audio == $(queue>item:current).@#audio);
        DB.data.p[i].time = time;
    }
    DB.save();
    $(queue>item:current).@#time = time;
    if (!$(#tapePlay).@#started) return false;
    return true;
}

function hms(seconds) {
  var m,s;
  s = seconds % 60; seconds /= 60;
  m = seconds % 60; return ( m, s );
}

//| Update Tracker and Time | repeat every 0.5s while podcast is playing
function pulse() {
    //| videoIsPlaying() not working [because no frame is rendered]
    // if (!Tape.videoIsPlaying()) return false; 
    if (!$(#tapePlay).@#started) return false;
    var m = (Tape.videoDuration() + 0.5).toInteger();
    var t = (Tape.videoPosition() + 0.5).toInteger();
    if( ! Tracker.state.hover ) {
      Tracker.sliderRange(0, m);
      Tracker.value = t;
    }
    var (tm,ts) = hms(t); var (mm,ms) = hms(m);
    Tracker.@#time = String.printf("%02d:%02d", tm, ts);
    $(#time).value = String.printf("%02d:%02d of %02d:%02d", tm,ts,mm,ms);
    if (t == m) { if (var item = Queue.$$(item)[Queue.$(item:current).index-1]) item.sendEvent("click"); }
    return true;
}

const Linux = {
    is: System.PLATFORM == "Linux",
    player: undefined,
    time: 0,
    duration: 0,
    audio: "",
}

Linux.listen = () => {
    function toSeconds(time) {
        var m = time.split(":").map(t=>t.toInteger());
        return (m[0]*3600 + m[1]*60 + m[2]);
    }
    Linux.player.on("stderr", (d) => {
                    if (d[..2] == "A:") {
                        var time = d.match(/\d+\:\d+\:\d+/g);
                        Linux.time = toSeconds(time[0]);
                        Linux.duration = toSeconds(time[1]);
                    }
                })
}

function setupLinux() {
    if (Linux.is) {
        Tape.videoPlay = (time = false) => {
            time = typeof time == #integer ? time.toString() : Linux.time.toString();
            Tape.videoStop();
            Linux.player = System.Process.exec("mpv", ["--vid=no", "--start", time, Linux.audio]);
            Linux.listen();
        }
        Tape.videoPosition = (time = false) => {
            if (typeof time == #integer)
                Linux.time = time;
            return Linux.time;
        }
        Tape.videoDuration = () => {
            return Linux.duration;
        }
        Tape.videoLoad = (url) => { Linux.audio = url; }
        Tape.videoUnload = () => {
            if (Linux.player !== undefined && Linux.player.active == true) {
                Linux.player.terminate();
                Linux.player = undefined;
            }
        }
        Tape.videoStop = Tape.videoUnload;
    }
}

setupLinux();